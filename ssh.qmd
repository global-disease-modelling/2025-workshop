---
title: Remote logins and SSH
execute: 
  eval: false
number-sections: true
---

What happens when we want to run some commands on another machine, such as Pawsey's Setonix? To do this, we have to first log in to that machine. We call this a remote login.

In order for us to be able to login, the remote computer must be running a remote login server and we will run a client program that can talk to that server. The client program passes our login credentials to the remote login server and, if we are allowed to login, that server then runs a shell for us on the remote computer.

Once our local client is connected to the remote server, everything we type into the client is passed on, by the server, to the shell running on the remote computer. That remote shell runs those commands on our behalf, just as a local shell would, then sends back output, via the server, to our client, for our computer to display.

## Background

Back in the day, when everyone trusted each other and knew every chip in their computer by its first name, people didn’t encrypt anything except the most sensitive information when sending it over a network and the two programs used for running a shell (usually back then, the Bourne Shell, `sh`) on, or copying files to, a remote machine were named `rsh` and `rcp`, respectively. Think (`r`)emote `sh` and `cp`.

However, anyone could watch the unencrypted network traffic, which meant that villains could steal usernames and passwords. The [SSH protocol](https://carpentries-incubator.github.io/shell-extras/reference/#ssh-protocolhttps://www.ssh.com/academy/ssh/protocol) was invented to prevent this (or at least slow it down). It uses several sophisticated, and heavily tested, encryption protocols to ensure that outsiders can’t see what’s in the messages going back and forth between different computers.

The remote login server which accepts connections from client programs is known as the SSH daemon. The client program we use to login remotely is the **secure shell** or **SSH** (think (`s`)ecure `sh`).

## Logging in using `ssh`

To make a remote login, we issue the command `ssh <username>@<computer>` which tries to make a connection to the SSH daemon running on the remote computer we have specified. For Chitra to access the Setonix computer on Pawsey, she logs in using `ssh chitrams@setonix.pawsey.org.au`.

::: {.callout-warning title="Test your understanding"}
1.  What happens if Chitra has already been allocated a node named `nid09310` that she would like to directly log in to?
2.  What happens if Chitra wants to access the data mover nodes on Pawsey, which has the hostname `data-mover.pawsey.org.au`?
:::

::: {.callout-note title="Answer" icon="false" collapse="true"}
For the first instance, Chitra would log in with the following command:

``` bash
ssh chitrams@nid09310.pawsey.org.au
```

For the second, Chitra would log in with the following command:

``` bash
sftp chitrams@data-mover.pawseyl.org.au
```

where `sftp` is another companion program for `ssh`, the Secure File Transfer Protocol. We talk about this in a subsequent section.
:::

After we log in, we can use the remote shell to use the remote computer’s files and directories.

Typing `exit` terminates the remote shell (and the local client program on that remote shell) and returns us to our previous shell.

## Transferring files to and from Pawsey

The `ssh` login client has companion programs called `scp` (think (`s`)ecure `cp`) and `sftp` (short for Secure File Transfer Protocol) which allows us to copy files to or from a remote computer using the same kind of encrypted connection as SSH.

Command line clients such as `scp` and `sftp` are a convenient way of moving data between computers. Alternatively, you could use GUI clients such as Filezilla, Cyberduck, or WinSCP.

::: {.callout-important title="Use SSH keys!"}
Whichever you use, it is strongly recommended to use SSH keys instead of the conventional and less secure username and password. See @sec-sshkeys for information on SSH keys.
:::

### `scp`

`scp` is useful to copy few small files and not a lot or very large files. It is not recommended for the transfer of large amounts of data, as it can't resume transfers if the operation/connection is interrupted for any reason.

The syntax for scp is:

```
scp <options> <path/to/source> <user-name>@data-mover.pawsey.org.au:<path/to/destination>

scp <options> <user-name>@data-mover.pawsey.org.au:<path/to/source> <path/to/destination> 
```

Note the use of the colon (`:`) separating the hostname and the definition of the path/files on it.

Let's look at an example. For Chitra to transfer the file "/VIMC/launch.R" from a local computer into her personal directory in "/scratch", she would use:

```bash
$ scp /VIMC/launch.R chitrams@data-mover.pawsey.org.au:/scratch/pawsey1104/chitrams
```

On Pawsey, your personal directory in scratch will always look like: `/scratch/<project-name>/<user-name>`.

To transfer a whole directory tree recursively, then the option `-r` needs to be used. As an example:

```bash
scp -r chitra-ms@data-mover.pawsey.org.au:/scratch/pawsey1104/chitrams/vimc-pawsey/output ./pawsey-files
```

### `sftp`

### GUI clients

GUI clients are a very attractive option for file transfers because of their intuitive framework. They have the advantage that users do not need to remember the several different options for the command-line tools, but keep in mind these GUI clients are still based on the command line clients listed above. In practice, the combined use of both GUI and command line clients within your workflows results in better efficiency.

Pawsey recommends the file transfer clients FileZilla (available for Windows, MacOS, and Linux), Cyberduck (available for MacOS and Windows), or WinSCP (available for Windows).

::: {.callout-important title="Downloading software"}
Only download these tools from its official website:

-   Filezilla: [filezilla-project.org/index.php](https://filezilla-project.org/index.php)
-   Cyberduck: [cyberduck.io](https://cyberduck.io/)
-   WinSCP: [winscp.net/eng/index.php](https://winscp.net/eng/index.php)

As for any software, be careful of not falling into "click tricks" that mislead you to download or install undesired software.
:::

::: {.callout-important title="Authentication"}
We do not recommend saving your password within the GUI client, use SSH keys instead. See @sec-sshkeys for information on SSH keys.
:::

## SSH keys {#sec-sshkeys}

Typing our password over and over again is annoying, especially if the commands we want to run remotely are in a loop. To remove the need to do this, we can create an SSH key to tell the remote machine that it should always trust us.

SSH keys come in pairs: a public key that gets shared with services like GitHub, and a private key that is stored only on your computer. If the keys match, you’re granted access. The cryptography behind SSH keys ensures that no one can reverse engineer your private key from the public one.

The first step in using SSH authorization is to generate your own key pair. You might already have an SSH key pair on your machine. You can check to see if one exists by moving to your `.ssh` directory and listing the contents.

```bash
$ cd ~/.ssh
$ ls
```

If you see `id_rsa.pub`, you already have a key pair and don’t need to create a new one. If you don’t see `id_rsa.pub`, use the following command to generate a new key pair. Make sure to replace your@email.com with your own email address.

### Generating a key pair for GitHub

https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent

### Generating a key pair for Pawsey

https://pawsey.atlassian.net/wiki/spaces/US/pages/51925870/Use+of+SSH+Keys+for+Authentication
