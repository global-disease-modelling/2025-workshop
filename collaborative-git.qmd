---
title: Collaborative Git
---

## Introduction

You've probably already committed and pushed changes to GitHub, and you're comfortable with creating branches. In this section we'll level up your Git knowledge to fully utilise Git for collaboration.

### Questions

These questions encapsulate the concepts we will address in this section.

-   What does it mean to have staged and unstaged changes?
-   What is a branch? Where does it live?
-   How do you add a second remote, and why would you want multiple remote repositories?
-   How do I incorporate someone else's changes with the changes I've made, if we've both committed to the same branch at the same time?
-   How do you re-write history if you're unhappy with the direction your project has taken?
-   Following up on the previous question, can you choose to keep only some changes and not others?

### Outline

-   We will discuss what happens when staging, committing, and pushing
-   We will discuss branches, remotes, and pull requests: what they are and how to use them
-   We will discuss what is considered best practice for commits, pushing, and branches on the command line
-   We will discuss what is considered best practice for team workflows, including how to use pull requests on GitHub
-   We will look at how to use revert, reset, merge, and cherry-pick, especially when collaborating with others

## Background

Why we like version control:

-   Nothing that is committed to version control is ever lost, unless you work really, really hard at losing it. Since all old versions of files are saved, it’s always possible to go back in time to see exactly who wrote what on a particular day, or what version of a program was used to generate a particular set of results.
-   As we have this record of who made what changes when, we know who to ask if we have questions later on, and, if needed, revert to a previous version, much like the “undo” feature in an editor.
-   When several people collaborate in the same project, it’s possible to accidentally overlook or overwrite someone’s changes. The version control system automatically notifies users whenever there’s a conflict between one person’s work and another’s.

Teams are not the only ones to benefit from version control: lone researchers can benefit immensely. Keeping a record of what was changed, when, and why is extremely useful for all researchers if they ever need to come back to the project later on (e.g., a year later, when memory has faded).

Version control is the lab notebook of the digital world: it’s what professionals use to keep track of what they’ve done and to collaborate with other people. Every large software development project relies on it, and most programmers use it for their small jobs as well. And it isn’t just for software: books, papers, small data sets, and anything that changes over time or needs to be shared can and should be stored in a version control system.
